/*
 * Copyright (c) 2017, The Regents of the University of California (Regents).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Please contact the author(s) of this library if you have any questions.
 * Authors: David Fridovich-Keil   ( dfk@eecs.berkeley.edu )
 */

///////////////////////////////////////////////////////////////////////////////
//
// Defines the LinearStateValueFunctor class, which derives from the
// ContinuousStateValueFunctor base class. This class models the value function
// as a linear function of some feature vector generated by the state.
//
// Keeps track of an elegibility trace for each feature by default. This feature
// may be turned off by setting the parameter 'eligibility_decay' (which is
// just the classic lambda * discount_factor) to zero.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef RL_VALUE_LINEAR_STATE_VALUE_FUNCTOR_H
#define RL_VALUE_LINEAR_STATE_VALUE_FUNCTOR_H

#include <value/continuous_state_value_functor.hpp>
#include <util/types.hpp>

#include <random>

namespace rl {

  template<typename StateType>
  class LinearStateValueFunctor :
    public ContinuousStateValueFunctor<StateType> {
  public:
    // Constructor/destructor.
    ~LinearStateValueFunctor() {}
    explicit LinearStateValueFunctor(double eligibility_decay = 0.0)
      : weights_(VectorXd::Zero(StateType::FeatureDimension())),
        eligibility_(VectorXd::Zero(StateType::FeatureDimension())),
        eligibility_decay_(eligibility_decay),
        ContinuousStateValueFunctor<StateType>() {
      // Create a random number generator for a normal distribution of mean
      // 0.0 and standard deviation 0.1.
      std::random_device rd;
      std::default_random_engine rng(rd());
      std::normal_distribution<double> gaussian(0.0, 0.1);

      // Populate weights from this distribution.
      for (size_t ii = 0; ii < weights_.size(); ii++)
        weights_(ii) = gaussian(rng);
    }

    // Pure virtual method to output the value at a state.
    double operator()(const StateType& state) const {
      // Extract feature from state.
      VectorXd features(weights_.size());
      state.Features(features);

      return features.transpose() * weights_;
    }

    // Pure virtual method to do a gradient update to underlying weights.
    void Update(const StateType& state, double target, double step_size) {
      // Extract feature from state.
      VectorXd features(weights_.size());
      state.Features(features);

      // Update eligibility trace.
      eligibility_ *= eligibility_decay_;
      eligibility_ += features;

      const double output = features.transpose() * weights_;
      weights_ += (target - output) * step_size * eligibility_;
    }

  private:
    // Vector of weights.
    VectorXd weights_;

    // Eligibility trace with decay rate.
    VectorXd eligibility_;
    const double eligibility_decay_;
  }; //\struct LinearStateValueFunctor

}  //\namespace rl

#endif
